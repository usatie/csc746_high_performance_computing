@misc{nersc_perlmutter_architecture,
  author    = {{NERSC}},
  title     = {Perlmutter Architecture},
  year      = {2024},
  howpublished       = {https://docs.nersc.gov/systems/perlmutter/architecture/},
  note      = {Accessed: September 2024}
}

@misc{amd_epyc_tuning_guide,
  author    = {{AMD}},
  title     = {HPC Tuning Guide for AMD EPYC 7003 Series Processors},
  year      = {2022},
  howpublished       = {https://www.amd.com/content/dam/amd/en/documents/epyc-technical-docs/tuning-guides/high-performance-computing-tuning-guide-amd-epyc7003-series-processors.pdf},
  note      = {Accessed: September 2024}
}

@inproceedings{amdahl1967validity,
author = {Amdahl, Gene M.},
title = {Validity of the single processor approach to achieving large scale computing capabilities},
year = {1967},
isbn = {9781450378956},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1465482.1465560},
doi = {10.1145/1465482.1465560},
abstract = {For over a decade prophets have voiced the contention that the organization of a single computer has reached its limits and that truly significant advances can be made only by interconnection of a multiplicity of computers in such a manner as to permit cooperative solution. Variously the proper direction has been pointed out as general purpose computers with a generalized interconnection of memories, or as specialized computers with geometrically related memory interconnections and controlled by one or more instruction streams.},
booktitle = {Proceedings of the April 18-20, 1967, Spring Joint Computer Conference},
pages = {483–485},
numpages = {3},
location = {Atlantic City, New Jersey},
series = {AFIPS '67 (Spring)}
}

@misc{openmp_spec,
  title        = {OpenMP Application Programming Interface},
  author       = {{OpenMP Architecture Review Board}},
  year         = {2015},
  organization = {OpenMP ARB},
  note         = {Version 4.5},
  howpublished          ={https://www.openmp.org/specifications/}
}

@article{Phong1975,
   abstract = {The quality of computer generated images of three-dimensional scenes depends on the shading technique used to paint the objects on the cathode-ray tube screen. The shading algorithm itself depends in part on the method for modeling the object, which also determines the hidden surface algorithm. The various methods of object modeling, shading, and hidden surface removal are thus strongly interconnected. Several shading techniques corresponding to different methods of object modeling and the related hidden surface algorithms are presented here. Human visual perception and the fundamental laws of optics are considered in the development of a shading rule that provides better quality and increased realism in generated images. © 1975, ACM. All rights reserved.},
   author = {Bui Tuong Phong},
   doi = {10.1145/360825.360839},
   issn = {15577317},
   issue = {6},
   journal = {Communications of the ACM},
   title = {Illumination for Computer Generated Pictures},
   volume = {18},
   year = {1975},
}

@article{Whitted1980,
   abstract = {To accurately render a two-dimensional image of a three-dimensional scene, global illumination information that affects the intensity of each pixel of the image must be known at the time the intensity is calculated. In a simplified form, this information is stored in a tree of “rays” extending from the viewer to the first surface encountered and from there to other surfaces and to the light sources. A visible surface algorithm creates this tree for each pixel of the display and passes it to the shader. The shader then traverses the tree to determine the intensity of the light received by the viewer. Consideration of all of these factors allows the shader to accurately simulate true reflection, shadows, and refraction, as well as the effects simulated by conventional shaders. Anti-aliasing is included as an integral part of the visibility calculations. Surfaces displayed include curved as well as polygonal surfaces. © 1980, ACM. All rights reserved.},
   author = {Turner Whitted},
   doi = {10.1145/358876.358882},
   issn = {15577317},
   issue = {6},
   journal = {Communications of the ACM},
   title = {An Improved Illumination Model for Shaded Display},
   volume = {23},
   year = {1980},
}

@inproceedings{Aila2009,
   abstract = {We discuss the mapping of elementary ray tracing operations- acceleration structure traversal and primitive intersection-onto wide SIMD/SIMT machines. Our focus is on NVIDIA GPUs, but some of the observations should be valid for other wide machines as well. While several fast GPU tracing methods have been published, very little is actually understood about their performance. Nobody knows whether the methods are anywhere near the theoretically obtainable limits, and if not, what might be causing the discrepancy. We study this question by comparing the measurements against a simulator that tells the upper bound of performance for a given kernel. We observe that previously known methods are a factor of 1.5-2.5X off from theoretical optimum, and most of the gap is not explained by memory bandwidth, but rather by previously unidentified inefficiencies in hardware work distribution. We then propose a simple solution that significantly narrows the gap between simulation and measurement. This results in the fastest GPU ray tracer to date. We provide results for primary, ambient occlusion and diffuse interreflection rays. Copyright © 2009 by the Association for Computing Machinery, Inc.},
   author = {Timo Aila and Samuli Laine},
   doi = {10.1145/1572769.1572792},
   booktitle = {Proceedings of the HPG 2009: Conference on High-Performance Graphics 2009},
   title = {Understanding the efficiency of ray traversal on GPUs},
   year = {2009},
}
@article{Kajiya1986,
   abstract = {We present an integral equation which generalizes a variety of known rendering algorithms. In the course of discussing a monte carlo solution we also present a new form of variance reduction, called hierarchical sampling and give a number of elaborations that show it may be an efficient new technique for a wide variety of monte carlo procedures. The resulting rendering algorithm extends the range of optical phenomena which can be effectively simulated.},
   author = {James T. Kajiya},
   doi = {10.1145/15886.15902},
   issn = {00978930},
   issue = {4},
   journal = {Computer Graphics (ACM)},
   title = {RENDERING EQUATION.},
   volume = {20},
   year = {1986},
}

@article{Cook1984,
   abstract = {Ray tracing is one of the most elegant techniques in computer graphics. Many phenomena that are difficult or impossible with other techniques are simple with ray tracing, including shadows, reflections, and refracted light. Ray directions, however, have been determined precisely, and this has limited the capabilities of ray tracing. By distributing the directions of the rays according to the analytic function they sample, ray tracing can incorporate fuzzy phenomena. This provides correct and easy solutions to some previously unsolved or partially solved problems, including motion blur, depth of field, penumbras, translucency, and fuzzy reflections. Motion blur and depth of field calculations can be integrated with the visible surface calculations, avoiding the problems found in previous methods.},
   author = {Robert L. Cook and Thomas Porter and Loren Carpenter},
   doi = {10.1145/964965.808590},
   issn = {00978930},
   issue = {3},
   journal = {Computer Graphics (ACM)},
   title = {DISTRIBUTED RAY TRACING.},
   volume = {18},
   year = {1984},
}

@article{Kay1986,
   abstract = {A new algorithm for speeding up ray-object intersection calculations is presented. Objects are bounded by a new type of extent, which can be made to fit convex hulls arbitrarily tightly. The objects are placed into a hierarchy. A new hierarchy traversal algorithm is presented which is efficient in the sense that objects along the ray are queried in an efficient order. Results are presented which demonstrate that our technique is several times faster than other published algorithms. Furthermore, we demonstrate that it is currently possible to ray trace scenes containing hundreds of thousands of objects.},
   author = {Timothy L. Kay and James T. Kajiya},
   doi = {10.1145/15886.15916},
   issn = {00978930},
   issue = {4},
   journal = {Computer Graphics (ACM)},
   title = {RAY TRACING COMPLEX SCENES.},
   volume = {20},
   year = {1986},
}

@misc{nvidia_optix,
  author       = {NVIDIA Corporation},
  title        = {NVIDIA OptiX Ray Tracing Engine},
  year         = {2024},
  howpublished = {\url{https://developer.nvidia.com/optix}},
  note         = {Accessed: 2024-12-14}
}